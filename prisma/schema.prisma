generator client {
  // provider = "prisma-client-js"
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env(“SHADOW_DATABASE_URL”)
}

model User {
  id           Int          @id @default(autoincrement())
  email        String       @unique
  displayName  String?
  accessToken  String? // to store access tokens
  refreshToken String? // to store refresh tokens
  profile      Json? // to store user profile data
  subAccounts  SubAccount[]
  botAccountId Int? // This will be a foreign key
  botAccount   BotAccount?
}

model SubAccount {
  locationId           String      @id @unique
  botAccountId         Int? // This will be a foreign key
  botAccount           BotAccount? @relation(fields: [botAccountId], references: [id])
  accessToken          String?
  accessTokenExpiresAt DateTime?
  refreshToken         String?
  botEmail             String
  botPassword          String
  owner                User        @relation(fields: [ownerId], references: [id])
  ownerId              Int // This will be a foreign key
}

model PhoneCall {
  id            Int      @id @default(autoincrement())
  callTime      DateTime
  callerNumber  String
  callerName    String
  accountId     String
  transcription String?
  filepath      String
  tagged        Boolean
  tags          String[]
}

model BotAccount {
  id          Int          @id @default(autoincrement())
  botEmail    String
  botPassword String
  owner       User?        @relation(fields: [ownerId], references: [id])
  ownerId     Int?         @unique
  subAccounts SubAccount[]
}
